# -*- coding: utf-8 -*-
"""IBM-Project-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17iRV-sxvGVVKr_S74KWMQ0PcmmBSP6Nn

# Importing data files
*   Collecting data (From data understanding)
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

path = "/content/drive/MyDrive/Analysis project(IBM-Nation)-1/Product Data Set - Student 2 of 3.csv"
product_data = pd.read_csv(path, sep = '|')
product_data.head(2)

path = "/content/drive/MyDrive/Analysis project(IBM-Nation)-1/Transaction Data Set - Student 3 of 3.csv"
transactions_data = pd.read_csv(path, sep = '|')
transactions_data.head(2)

path = "/content/drive/MyDrive/Analysis project(IBM-Nation)-1/Customer Data Set - Student 1 of 3.csv"
customer_data = pd.read_csv(path, sep = ',')
customer_data.head(2)

"""# Data Exploration
*   From Data understanding & preparation

Check dimenstional of dataframe
"""

print('product_data Dimensions: ',product_data.shape)
print('transactions_data Dimensions: ',transactions_data.shape)
print('customer_data Dimensions: ',customer_data.shape)

"""--> conclude that Retailer X sells 30 products and served 500 customers in a total of 10,000 recorded transactions"""

customer_data.dtypes

"""--> We need to remnove Dollar sign ($) from INCOME column & remove comma sign (",") to be an integer type to be able to apply any mathematical operations."""

customer_data['INCOME'] = customer_data['INCOME'].map(lambda x: x.replace('$', ''))
customer_data['INCOME'] = customer_data['INCOME'].map(lambda x: int(x.replace(',', '')))
customer_data.head(1)

customer_data['INCOME'].describe()

print("Describe :\n", customer_data['MARITAL STATUS'].describe())
print("\n", customer_data['MARITAL STATUS'].unique())

"""--> We need to use unique() function to know all values in column 
*   as we get customer_data['MARITAL STATUS'] unique = 4. 


"""

print("Describe :\n",customer_data['LOYALTY GROUP'].describe())
print("\n",customer_data['LOYALTY GROUP'].unique())

"""-->The Enrolment Date column is a date and should be represented as a datetime object 
*   We use datetime library & datetime.strptime function that return date_string


"""

from datetime import datetime 
#  customer_data['ENROLLMENT DATE'] = customer_data['ENROLLMENT DATE'].map(lambda x :datetime.strptime(x, '%d-%m-%y'))
# customer_data.head(2)

"""==> We get a TypeError: strptime() argument 1 must be str, not float
*   So we need to check ENROLLMENT DATE column
"""

customer_data['ENROLLMENT DATE'].unique()

"""**There is a NAT values in columns**

We applied a filter on column to bypass this error by:: 
*   DataFrame[column][Column Filter Condition]
"""

from datetime import datetime 
customer_data['ENROLLMENT DATE'] = customer_data['ENROLLMENT DATE'][customer_data['ENROLLMENT DATE'].notnull()].map(lambda x :datetime.strptime(x, '%d-%m-%Y'))
customer_data.head(2)

"""All dataframes are Checked for null values"""

print("null vales for transactions: ", transactions_data.isnull().values.any())
print("null vales for product: ", product_data.isnull().values.any())
print("null vales for customer: ", customer_data.isnull().values.any())

print("This column has a null values:\n",customer_data.columns[customer_data.isna().any()].tolist())

"""# New Section
#Analysis of the Distribution of Variables by using Graphs

**Univariate Analysis**
"""

import matplotlib.pyplot as plt

customer_data['MARITAL STATUS'].value_counts().plot(kind = 'bar')
plt.xlabel("Martial Statues")
plt.ylabel("Frequency Distribution")
plt.show()

customer_data['AGE'].hist(bins=10)
plt.xlabel("Age")
plt.show()

plt.figure(figsize=(8,8))
plt.boxplot(customer_data.AGE,0,'rs',1)
plt.grid(linestyle = '-', linewidth = 1)
plt.show()

"""# Creating a Customer view


*   Verifying the data quality



"""

trans_products = transactions_data.merge(product_data, how ='inner', left_on = 'PRODUCT NUM', right_on = 'PRODUCT CODE')
trans_products.head()

trans_products['UNIT LIST PRICE'] = trans_products['UNIT LIST PRICE'].map(lambda x:x.replace('$',''))
trans_products['UNIT LIST PRICE'] = trans_products['UNIT LIST PRICE'].map(lambda x:float(x.replace(',','')))
trans_products.head()

"""**Total price column for each transaction**"""

trans_products['Total_Price'] = trans_products['QUANTITY PURCHASED'] * (1- trans_products['DISCOUNT TAKEN']) * trans_products['UNIT LIST PRICE'] 
trans_products.head()

"""**Report the revenue per product category**"""

Total_number_of_product = trans_products.groupby('PRODUCT CATEGORY').agg({'QUANTITY PURCHASED' : 'sum'}).sort_values('QUANTITY PURCHASED', ascending = False)
Total_number_of_product.head()

Income_by_product = trans_products.groupby('PRODUCT CATEGORY').agg({'Total_Price' : 'sum'}).sort_values('Total_Price', ascending = False)
Income_by_product.head()

Revenue_by_product = Income_by_product.rename(columns = {'Total_Price' : 'Revenue Per Product'})
Revenue_by_product['Revenue Per Product'].plot(kind = 'pie', autopct = '%1.1f%%', legend = True)

"""Let us calculate for each customer the following measures, and see whether any of these measures affects loyalty enrolment:
*   Total spends per category
*   Total spends
*   Most recent transaction dates
*   Average Discount taken






"""

customer_prod_categ = trans_products.groupby(['CUSTOMER NUM','PRODUCT CATEGORY']).agg({'Total_Price': 'sum'})
customer_prod_categ.head()

customer_prod_categ.columns

customer_prod_categ.reset_index().head()

customer_pivot=customer_prod_categ.pivot_table(index= 'CUSTOMER NUM',columns='PRODUCT CATEGORY',values='Total_Price')
customer_pivot.head()

"""Total spends &
Most recent transaction dates
"""

trans_products['TRANSACTION DATE']=trans_products['TRANSACTION DATE'].map(lambda x :datetime.strptime(x, '%m/%d/%Y') )

"""**calculate the latest transaction date and the total spend for each customer**"""

recent_trans_total_spend = trans_products.groupby('CUSTOMER NUM').agg({'TRANSACTION DATE' : 'max', 'Total_Price' : 'sum' })
recent_trans_total_spend = recent_trans_total_spend.rename(columns = {'TRANSACTION DATE': 'Recent Transaction Dates', 'Total_Price': 'Total Spent' })
recent_trans_total_spend.head()

recent_trans_total_spend.reset_index().head()

customer_KPIS = customer_pivot.merge(recent_trans_total_spend, how = 'inner', left_index= True , right_index = True)
customer_KPIS.head()

customer_KPIS=customer_KPIS.fillna(0)

customer_KPIS.head()

customer_all_view = customer_data.merge(customer_KPIS, how ='inner', left_on='CUSTOMERID', right_index=True)
customer_all_view.head()

"""**Bivariate Analysis**"""

table = pd.crosstab(customer_all_view['GENDER'],customer_all_view['LOYALTY GROUP'])
table.plot(kind='bar', stacked=True,figsize=(6,6))
plt.show()

table = pd.crosstab(customer_all_view['EXPERIENCE SCORE'],customer_all_view['LOYALTY GROUP'])
table.plot(kind='bar', stacked=True,figsize=(6,6))
plt.show()

table = pd.crosstab(customer_all_view['MARITAL STATUS'],customer_all_view['LOYALTY GROUP'])
table.plot(kind='bar', stacked=True,figsize=(6,6))
plt.show()

"""Age is a continuous variable. So, we use The Pandas cut command automatically bins values into discrete intervals"""

customer_all_view['AGE_BINNED'] = pd.cut(customer_all_view['AGE'],10)
# customer_all_view['AGE_BINNED'].head(10)

table = pd.crosstab(customer_all_view['AGE_BINNED'],customer_all_view['LOYALTY GROUP'])
table.plot(kind='bar', stacked=True,figsize=(6,6))
plt.show()

"""**There is some sort of significants relationship between ages**"""

customer_all_view.groupby("LOYALTY GROUP").agg({'AGE': 'mean'}).reset_index()

fig = plt.figure(1, figsize=(9,6))
ax = fig.add_subplot(111)
plot1= customer_all_view['AGE'] [customer_all_view['LOYALTY GROUP'] == 'enrolled']
plot2= customer_all_view['AGE'] [customer_all_view['LOYALTY GROUP'] == 'notenrolled']
Plot = [plot1,plot2]
ax.boxplot(Plot,0,'rs',1)

plt.show()

customer_all_view['TOTAL SPENT BINNED'] = pd.cut(customer_all_view['Total Spent'],10)
# customer_all_view['TOTAL SPENT BINNED'].head(10)
table = pd.crosstab(customer_all_view['TOTAL SPENT BINNED'],customer_all_view['LOYALTY GROUP'])
table.plot(kind = 'bar', stacked=True,figsize=(6,6))
plt.show()

table = pd.crosstab(customer_all_view['HOUSEHOLD SIZE'],customer_all_view['LOYALTY GROUP'])
table.plot(kind = 'bar',stacked=True,figsize=(6,6))
plt.show()

plt.scatter(customer_all_view['AGE'],customer_all_view['Total Spent'])
plt.xlabel('Age')
plt.ylabel('Total Spent')
plt.show()

from scipy.stats import pearsonr
pearsonr(customer_all_view['AGE'],customer_all_view['Total Spent'])

correlation_value = customer_all_view[['AGE','Total Spent']].dropna() #deopna() function is used for drop any missing values if existed
correlation_value.corr()