# -*- coding: utf-8 -*-
"""IBM-Project-1-Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QLVaub_tFLOueXGex143BhDfWq6dWCgX
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

path = "/content/drive/MyDrive/IBM - Data Science/Analysis project(IBM-Nation)/Project-1-Analysis/Files/Product Data Set - Student 2 of 3.csv"
product_data = pd.read_csv(path, sep = '|')
product_data.head(2)

path = "/content/drive/MyDrive/IBM - Data Science/Analysis project(IBM-Nation)/Project-1-Analysis/Files/Transaction Data Set - Student 3 of 3.csv"
transactions_data = pd.read_csv(path, sep = '|')
transactions_data.head(2)

path = "/content/drive/MyDrive/IBM - Data Science/Analysis project(IBM-Nation)/Project-1-Analysis/Files/Customer Data Set - Student 1 of 3.csv"
customer_data = pd.read_csv(path, sep = ',')
customer_data.head(2)

customer_data['INCOME'] = customer_data['INCOME'].map(lambda x: x.replace('$','')) 
customer_data['INCOME'] = customer_data['INCOME'].map(lambda x: int(x.replace(',','')))

product_data['UNIT LIST PRICE'] = product_data['UNIT LIST PRICE'].map(lambda x: float(x.replace('$','')))

trans_products = transactions_data.merge(product_data, how= 'inner', left_on ='PRODUCT NUM', right_on = 'PRODUCT CODE')
trans_products.head()

trans_products['Total_Price'] = trans_products['QUANTITY PURCHASED'] * trans_products['UNIT LIST PRICE'] * (1-trans_products['DISCOUNT TAKEN'])
trans_products.head()

customer_prod_categ = trans_products.groupby(['CUSTOMER NUM','PRODUCT CATEGORY']).agg({'Total_Price': 'sum'})
customer_prod_categ.head()

customer_prod_categ.reset_index()

customer_pivot = customer_prod_categ.pivot_table(index='CUSTOMER NUM', columns='PRODUCT CATEGORY', values='Total_Price')
customer_pivot.head()

trans_total_spend = trans_products.groupby('CUSTOMER NUM').agg({'Total_Price': 'sum'}).\
rename(columns = {'Total_Price':'Total Spent'})
trans_total_spend.head()

customer_KPIS = customer_pivot.merge(trans_total_spend, how = 'inner', left_index= True , right_index = True)
customer_KPIS.head()

customer_all_view = customer_data.merge(customer_KPIS, how ='inner', left_on='CUSTOMERID', right_index=True)
customer_all_view=customer_all_view.fillna(0)
customer_all_view.head()

"""# **Clustering**"""

from sklearn.cluster import KMeans
from sklearn.cluster import AgglomerativeClustering

cluster_input = customer_all_view[['INCOME','Total Spent']]
cluster_input.head(5)

"""Although you can use the elbow method or silhouette to determine the optimal number of clusters, but we divide it into 4 clusters

"""

Kmeans_model= KMeans(n_clusters=4)

cluster_output = Kmeans_model.fit_predict(cluster_input)
cluster_output

product_data.head().values

product_data.head().values[1,2]

"""convert the 1-dimensional NumPy array to a Pandas data frame """

cluster_output_pd = pd.DataFrame(cluster_output, columns= ['segment']) 
cluster_output_pd.head()

"""Merge the cluster input containing the income and total spending for each customer and the cluster output"""

segment_DF = pd.concat([cluster_input, cluster_output_pd], axis=1)
segment_DF.head()

"""**The cluster centroids**"""

Kmeans_model.cluster_centers_

""" To select only those segments that belong to the first cluster (cluster index=0)"""

segment_DF[segment_DF.segment ==0].head()

segment_DF[segment_DF.segment ==1].head()

segment_DF[segment_DF.segment ==2].head()

segment_DF[segment_DF.segment ==3].head()

import matplotlib.pyplot as plt

plt.scatter(segment_DF[segment_DF.segment==0]['INCOME'],segment_DF[segment_DF.segment==0]['Total Spent'],s=50, c='purple',label='Cluster1')
plt.scatter(segment_DF[segment_DF.segment==1]['INCOME'],segment_DF[segment_DF.segment==1]['Total Spent'],s=50, c='blue',label='Cluster2')
plt.scatter(segment_DF[segment_DF.segment==2]['INCOME'],segment_DF[segment_DF.segment==2]['Total Spent'],s=50, c='green',label='Cluster3')
plt.scatter(segment_DF[segment_DF.segment==3]['INCOME'],segment_DF[segment_DF.segment==3]['Total Spent'],s=50, c='cyan',label='Cluster4')
plt.scatter(Kmeans_model.cluster_centers_[:,0], Kmeans_model.cluster_centers_[:,1],s=200,marker='s', c='red', alpha=0.7, label='Centroids')

plt.title('Customer segments using K-means (k=4)')
plt.xlabel('Income')
plt.ylabel('Total Spend')
plt.legend()
plt.show()

customer_demographics=pd.concat([customer_all_view,cluster_output_pd],axis=1)
customer_demographics.head()

customer_demographics.groupby('segment').agg({'AGE':'mean','HOUSEHOLD SIZE':'median'})

"""value_counts function -> to know relative proportions -> return counts of different (categories)"""

def percent_loyalty(series):
    percent=100 * series.value_counts()['enrolled'] /series.count()
    return percent

customer_demographics.groupby('segment').agg({'AGE':'mean','HOUSEHOLD SIZE':'median','LOYALTY GROUP': percent_loyalty})